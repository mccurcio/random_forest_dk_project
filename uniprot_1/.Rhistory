sub.10 <- snps.10[,use]
# Calculate the PCs
xxmat <- xxt(sub.10, correct.for.missing=FALSE)
evv <- eigen(xxmat, symmetric=TRUE)
pcs <- evv$vectors[,1:5]
snpdata = sub.10@.Data
status = subject.support$cc
snp1 = as.numeric(snpdata[,1])
snp1[snp1 == 0] = NA
glm1 = glm(status ~ snp1, family = "binomial")
tidy(glm1)
snp1_dom = (snp1 == 1)
glm1_dom = glm(status ~ snp1_dom,family="binomial")
tidy(glm1_dom)
tidy(glm1)
glm2 = glm(status ~ snp1 + pcs[,1:5], family = "binomial")
tidy(glm2)
glm_all = snp.rhs.tests(status ~ 1,snp.data=sub.10)
slotNames(glm_all)
library(devtools)
library(Biobase)
library(snpStats)
library(broom)
library(MASS)
library(DESeq2)
data(for.exercise)
use <- seq(1, ncol(snps.10), 10)
sub.10 <- snps.10[,use]
# Calculate the PCs
xxmat <- xxt(sub.10, correct.for.missing=FALSE)
evv <- eigen(xxmat, symmetric=TRUE)
pcs <- evv$vectors[,1:5]
snpdata = sub.10@.Data
status = subject.support$cc
snp1 = as.numeric(snpdata[,1])
snp1[snp1 == 0] = NA
glm1 = glm(status ~ snp1, family = "binomial")
tidy(glm1)
snp1_dom = (snp1 == 1)
glm1_dom = glm(status ~ snp1_dom,family="binomial")
tidy(glm1_dom)
tidy(glm1)
glm2 = glm(status ~ snp1 + pcs[,1:5], family = "binomial")
tidy(glm2)
tidy(glm1)
glm_all = snp.rhs.tests(status ~ 1,snp.data=sub.10)
slotNames(glm_all)
glm_all = snp.rhs.tests(status ~ 1, snp.data = sub.10)
slotNames(glm_all)
qq.chisq(chi.squared(glm_all),df=1)
glm_all_adj = snp.rhs.tests(status ~ pcs,snp.data=sub.10)
qq.chisq(chi.squared(glm_all_adj),df=1)
sessionInfo()
library(devtools)
library(Biobase)
library(limma)
library(edge)
library(genefilter)
library(snpStats)
library(broom)
data(for.exercise)
use <- seq(1, ncol(snps.10), 10)
sub.10 <- snps.10[,use]
snpdata = sub.10@.Data
status = subject.support$cc
ls()
tstats_obj = rowttests(snpdata, status) # Calc T-tests for Rows, & Factor = status
connection = url("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/bottomly_eset.RData")
load(file = connection)
close(connection)
bot = bottomly.eset
pdata = pData(bot)
edata = as.matrix(exprs(bot))
fdata = fData(bot)
ls()
edata = log2(as.matrix(edata) + 1)
edata = edata[rowMeans(edata) > 10, ]
tstats_obj = rowttests(edata, pdata$strain) # Calc T-tests for Rows, & Factor = strain levels
# T-test row test only works for 2 group comparison
names(tstats_obj)
hist(tstats_obj$statistic, col = 3)
tstats_obj = rowttests(snpdata, subject.support$cc) # Calc T-tests for Rows, & Factor = status
tstats_obj = rowttests(status, snpdata) # Calc T-tests for Rows, & Factor = status
library(devtools)
library(Biobase)
library(limma)
library(edge)
library(genefilter)
connection = url("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/bottomly_eset.RData")
load(file = connection)
close(connection)
bot = bottomly.eset
pdata = pData(bot)
edata = as.matrix(exprs(bot))
fdata = fData(bot)
ls()
edata = log2(as.matrix(edata) + 1)
edata = edata[rowMeans(edata) > 10, ]
tstats_obj = rowttests(edata, pdata$strain) # Calc T-tests for Rows, & Factor = strain levels
# T-test row test only works for 2 group comparison
names(tstats_obj)
hist(tstats_obj$statistic, col = 3)
fstats_obj = rowFtests(edata, as.factor(pdata$lane.number)) # Row F-test
# F-test works for multiple variable regressions
# as.factor(pdata$lane.number) factors are lane numbers
names(fstats_obj)
table(pdata$lane.number)
hist(fstats_obj$statistic, col = 4)
mod = model.matrix(~ pdata$strain)
fit_limma = lmFit(edata,mod)
ebayes_limma = eBayes(fit_limma)
head(ebayes_limma$t)
plot(ebayes_limma$t[,2],
-tstats_obj$statistic,
col = 2,
xlab = "Moderated T-stat",
ylab = "T-stat")
abline(c(0,1), col = "darkgrey", lwd = 2)
mod_adj = model.matrix(~ pdata$strain + as.factor(pdata$lane.number))
fit_limma_adj = lmFit(edata, mod_adj)
ebayes_limma_adj = eBayes(fit_limma_adj)
head(ebayes_limma_adj$t)
plot(ebayes_limma_adj$t[,2],
-tstats_obj$statistic,
col = 4,
xlab = "Moderated T-stat",
ylab = "T-stat")
abline(c(0,1), lwd = 2, col = "darkgrey")
mod_lane = model.matrix(~ as.factor(pdata$lane.number))
fit_limma_lane = lmFit(edata,mod_lane)
ebayes_limma_lane = eBayes(fit_limma_lane)
head(ebayes_limma_lane$t)
top_lane = topTable(ebayes_limma_lane,
coef = 2:7,
number=dim(edata)[1],
sort.by = "none")
head(top_lane)
plot(top_lane$F,
fstats_obj$statistic,
xlab = "Moderated F-statistic",
ylab = "F-statistic",
col = 3)
edge_study = build_study(edata, grp = as.factor(pdata$lane.number))
de_obj = lrt(edge_study) # lrt = likelihood ratio test
qval = qvalueObj(de_obj)
plot(qval$stat,
fstats_obj$statistic,
col = 4,
xlab = "F-stat from edge",
ylab = "F-stat from genefilter")
edge_study2 = build_study(edata, grp = as.factor(pdata$lane.number),
adj.var = pdata$strain)
de_obj2 = lrt(edge_study2)
qval2 = qvalueObj(de_obj2)
plot(qval2$stat,
fstats_obj$statistic,
col = 4,
xlab = "F-stat from edge",
ylab = "F-stat from genefilter")
sessionInfo()
library("seqinr", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
heme_files = c(uniprot-erythrocruorin.fasta,
uniprot-hemerythrin.fasta,
uniprot-hemocyanin.fasta,
uniprot-hemoglobin.fasta,
uniprot-erythrocruorin.fasta,
uniprot-leghemoglobin.fasta,
uniprot-myoglobin.fasta)
heme_files = c("uniprot-erythrocruorin.fasta",
"uniprot-hemerythrin.fasta",
"uniprot-hemocyanin.fasta",
"uniprot-hemoglobin.fasta",
"uniprot-erythrocruorin.fasta",
"uniprot-leghemoglobin.fasta",
"uniprot-myoglobin.fasta")
library(randomForest)
library(seqinr)
library(Biostrings)
number_files = length(heme_files)
heme_files[1]
file_path = "/home/mcc/Dropbox/git_projects/random_forest_dk_project/uniprot_1"
heme_files = c("uniprot-erythrocruorin.fasta",
"uniprot-hemerythrin.fasta",
"uniprot-hemocyanin.fasta",
"uniprot-hemoglobin.fasta",
"uniprot-erythrocruorin.fasta",
"uniprot-leghemoglobin.fasta",
"uniprot-myoglobin.fasta")
number_files = length(heme_files)
for (i in 1:number_files)
filepath = paste(file_path, heme_files[i], sep = "")
storage_aa = readAAMultipleAlignment(filepath, "fasta")
for (i in 1:number_files)
filepath = paste(file_path, heme_files[i], sep = "")
storage_aa = readAAStringSet(filepath, "fasta")
source("http://bioconductor.org/biocLite.R")
biocLite("ShortRead")
library(randomForest)
library(seqinr)
library(Biostrings)
library(ShortRead)
browseVignettes("ShortRead")
# prepare matrixmatrix
number_of_proteins =
B = matrix("NA", nrow = number_of_proteins, ncol = 22)
# prepare matrixmatrix
number_of_proteins = 2
B = matrix("NA", nrow = number_of_proteins, ncol = 22)
# prepare matrixmatrix
number_of_proteins = 2
B = matrix("NA", nrow = number_of_proteins, ncol = 22)
View(B)
library(devtools)
library(Biobase)
library(goseq)
library(devtools)
library(Biobase)
library(goseq)
install.packages("MatrixEQTL")
source("http://www.bioconductor.org/biocLite.R")
biocLite(c("goseq","DESeq2"))
library(devtools)
library(Biobase)
library(goseq)
library(DESeq2)
head(supportedGenomes())
# install.packages("MatrixEQTL")
# source("http://www.bioconductor.org/biocLite.R")
# biocLite(c("goseq","DESeq2"))
library(devtools)
library(Biobase)
library(goseq)
library(DESeq2)
head(supportedGenomes())
# install.packages("MatrixEQTL")
# source("http://www.bioconductor.org/biocLite.R")
# biocLite(c("goseq","DESeq2"))
library(devtools)
library(Biobase)
library(goseq)
library(DESeq2)
head(supportedGenomes())
# install.packages("MatrixEQTL")
# source("http://www.bioconductor.org/biocLite.R")
# biocLite(c("goseq","DESeq2"))
library(devtools)
library(Biobase)
library(goseq)
library(DESeq2)
head(supportedGenomes())
head(supportedGenomes(5))
head(supportedGenomes(4))
head(supportedGenomes())
# install.packages("MatrixEQTL")
# source("http://www.bioconductor.org/biocLite.R")
# biocLite(c("goseq","DESeq2"))
library(devtools)
library(Biobase)
library(goseq)
library(DESeq2)
library(MatrixEQTL)
head(supportedGenomes())
install.packages("XML")
# install.packages("MatrixEQTL")
# source("http://www.bioconductor.org/biocLite.R")
# biocLite(c("goseq","DESeq2"))
library(devtools)
library(Biobase)
library(goseq)
library(DESeq2)
library(MatrixEQTL)
head(supportedGenomes())
# install.packages("MatrixEQTL")
# source("http://www.bioconductor.org/biocLite.R")
# biocLite(c("goseq","DESeq2"))
library(devtools)
install.packages("devtools")
# install.packages("MatrixEQTL")
# source("http://www.bioconductor.org/biocLite.R")
# biocLite(c("goseq","DESeq2"))
library(devtools)
library(Biobase)
install.packages("MatrixEQTL")
source("http://www.bioconductor.org/biocLite.R")
biocLite(c("Biobase","goseq","DESeq2"))
library(devtools)
library(Biobase)
library(goseq)
source("http://www.bioconductor.org/biocLite.R")
# biocLite(c("Biobase","goseq","DESeq2"))
biocLite("goseq")
library(devtools)
library(Biobase)
library(goseq)
install.packages("rgl")
install.packages("boot")
# install.packages("MatrixEQTL")
# source("http://www.bioconductor.org/biocLite.R")
# biocLite(c("Biobase","goseq","DESeq2"))
# biocLite("goseq")
library(devtools)
library(Biobase)
library(goseq)
install.packages("cluster")
# install.packages("MatrixEQTL")
# source("http://www.bioconductor.org/biocLite.R")
# biocLite(c("Biobase","goseq","DESeq2"))
# biocLite("goseq")
library(devtools)
library(Biobase)
library(goseq)
# install.packages("MatrixEQTL")
source("http://www.bioconductor.org/biocLite.R")
# biocLite(c("Biobase","goseq","DESeq2"))
biocLite("goseq")
library(devtools)
library(Biobase)
library(goseq)
# install.packages("MatrixEQTL")
source("http://www.bioconductor.org/biocLite.R")
# biocLite(c("Biobase","goseq",""))
biocLite("DESeq2")
library(devtools)
library(Biobase)
library(goseq)
library(MatrixEQTL)
library(DESeq2)
library(Biobase)
library(devtools)
source("https://bioconductor.org/biocLite.R")
biocLite("goseq")
# install.packages("MatrixEQTL")
# source("http://www.bioconductor.org/biocLite.R")
# biocLite(c("Biobase","goseq","DESeq2"))
# source("https://bioconductor.org/biocLite.R")
# biocLite("goseq")
library(devtools)
library(Biobase)
library(goseq)
library(DESeq2)
library(MatrixEQTL)
head(supportedGenomes())
head(supportedGeneIDs())
temp_data =read.table(system.file("extdata","Li_sum.txt",
package="goseq"),sep="\t",
header=TRUE,
stringsAsFactors=FALSE)
expr= temp_data[,-1]
rownames(expr) = temp_data[,1]
expr = expr[rowMeans(expr) > 5,]
grp=factor(rep(c("Control","Treated"),times=c(4,3)))
pdata  = data.frame(grp)
de = DESeqDataSetFromMatrix(expr, pdata, ~grp)
de_fit = DESeq(de)
de_results = results(de_fit)
genes = as.integer(de_results$padj < 0.05)
not_na = !is.na(genes)
names(genes) = rownames(expr)
genes = genes[not_na]
head(supportedGenomes(),n=12)[,1:4]
pwf = nullp(genes, "hg19", "ensGene")
head(pwf)
GO.wall=goseq(pwf,"hg19","ensGene")
library(paste(orgstring, "", sep = ""), character.only = TRUE)
# library(paste(orgstring, "", sep = ""), character.only = TRUE)
GO.wall = goseq(pwf, "hg19", "ensGene")
tail(pwf)
head(pwf)
library(paste(orgstring, "db", sep = "."), character.only = FALSE)
library(paste("hg19", "db", sep = "."), character.only = TRUE)
library(paste("hg19", "", sep = ""), character.only = TRUE)
organism(human)
library(paste("hg19.ensGene.LENGTH", "db", sep = "."), character.only = TRUE)
source("https://bioconductor.org/biocLite.R")
# biocLite("goseq")
biocLite("SummarizedExperiment")
GO.wall = goseq(pwf, "hg19", "ensGene")
GO.MF=goseq(pwf,"hg19","ensGene",test.cats=c("GO:MF"))
# install.packages("MatrixEQTL")
# source("http://www.bioconductor.org/biocLite.R")
# biocLite(c("Biobase","goseq","DESeq2"))
# source("https://bioconductor.org/biocLite.R")
# biocLite("goseq")
# biocLite("SummarizedExperiment")
library(devtools)
library(Biobase)
library(goseq)
library(DESeq2)
library(MatrixEQTL)
temp_data =read.table(system.file("extdata","Li_sum.txt",
package="goseq"),sep="\t",
header=TRUE,
stringsAsFactors=FALSE)
expr= temp_data[,-1]
rownames(expr) = temp_data[,1]
expr = expr[rowMeans(expr) > 5,]
grp=factor(rep(c("Control","Treated"),times=c(4,3)))
pdata  = data.frame(grp)
de = DESeqDataSetFromMatrix(expr, pdata, ~grp)
de_fit = DESeq(de)
de_results = results(de_fit)
genes = as.integer(de_results$padj < 0.05)
not_na = !is.na(genes)
names(genes) = rownames(expr)
genes = genes[not_na]
head(supportedGenomes(),n=12)[,1:4]
pwf = nullp(genes, "hg19", "ensGene")
head(pwf)
GO.wall = goseq(pwf, "hg19", "ensGene")
# install.packages("MatrixEQTL")
# source("http://www.bioconductor.org/biocLite.R")
# biocLite(c("Biobase","goseq","DESeq2"))
# source("https://bioconductor.org/biocLite.R")
# biocLite("goseq")
# biocLite("SummarizedExperiment")
library(devtools)
library(Biobase)
library(goseq)
library(DESeq2)
library(MatrixEQTL)
head(supportedGenomes())
head(supportedGeneIDs())
temp_data =read.table(system.file("extdata","Li_sum.txt",
package="goseq"),sep="\t",
header=TRUE,
stringsAsFactors=FALSE)
expr= temp_data[,-1]
rownames(expr) = temp_data[,1]
expr = expr[rowMeans(expr) > 5,]
grp=factor(rep(c("Control","Treated"),times=c(4,3)))
pdata  = data.frame(grp)
de = DESeqDataSetFromMatrix(expr, pdata, ~grp)
de_fit = DESeq(de)
de_results = results(de_fit)
genes = as.integer(de_results$padj < 0.05)
not_na = !is.na(genes)
names(genes) = rownames(expr)
genes = genes[not_na]
head(supportedGenomes(),n=12)[,1:4]
pwf = nullp(genes, "hg19", "ensGene")
head(pwf)
GO.wall=goseq(pwf,"hg19","ensGene")
# install.packages("MatrixEQTL")
# source("http://www.bioconductor.org/biocLite.R")
# biocLite(c("Biobase","goseq","DESeq2"))
# source("https://bioconductor.org/biocLite.R")
# biocLite("goseq")
# biocLite("SummarizedExperiment")
library(devtools)
library(Biobase)
library(goseq)
library(DESeq2)
temp_data =read.table(system.file("extdata","Li_sum.txt",
package="goseq"),sep="\t",
header=TRUE,
stringsAsFactors=FALSE)
expr= temp_data[,-1]
rownames(expr) = temp_data[,1]
expr = expr[rowMeans(expr) > 5,]
grp = factor(rep(c("Control","Treated"),times = c(4,3)))
pdata  = data.frame(grp)
head(supportedGenomes(), n = 12)[,1:4]
setwd("~/Dropbox/git_projects/random_forest_dk_project/uniprot_1")
install.packages("seqinr")
setwd("~/Dropbox/git_projects/random_forest_dk_project/uniprot_1")
# Loading library seqinr
library(seqinr)
# Loading your input file
fa <- read.fasta("oxygen-binders.fa")
# Getting sequences and gene names from fa object
genes <- sapply(strsplit(names(fa), "\\."), function(v) {return(v[1])})
sequences <- sapply(fa, c2s)
# Extracting longest transcript for each gene
filtered_seq <- tapply(sequences, genes, function(v) {return(v[which(nchar(v) = =max(nchar(v)))])})
# Extracting longest transcript for each gene
filtered_seq <- tapply(sequences, genes, function(v) {return(v[which(nchar(v) ==max(nchar(v)))])})
# Creating an object suitable for the write.fasta function
obj <- tapply(filtered_seq, 1:length(filtered_seq), s2c)
# Writing output file
write.fasta(obj , names(filtered_seq), file="output.fa")
# Creating an object suitable for the write.fasta function
obj <- tapply(filtered_seq, 1:length(filtered_seq))
# Writing output file
write.fasta(obj , names(filtered_seq), file="output.fa")
setwd("~/Dropbox/git_projects/random_forest_dk_project/uniprot_1")
# Loading library seqinr
library(seqinr)
# Loading your input file
fa <- read.fasta("oxygen-binders.fa")
# Getting sequences and gene names from fa object
genes <- sapply(strsplit(names(fa), "\\."), function(v) {return(v[1])})
sequences <- sapply(fa, c2s)
# Extracting longest transcript for each gene
filtered_seq <- tapply(sequences, genes, function(v) {return(v[which(nchar(v) == max(nchar(v)))])})
# Creating an object suitable for the write.fasta function
obj <- tapply(filtered_seq, 1:length(filtered_seq), length)
# Writing output file
write.fasta(obj , names(filtered_seq), file="output.fa")
setwd("~/Dropbox/git_projects/random_forest_dk_project/uniprot_1/")
# Loading library seqinr
library(seqinr)
# Loading your input file
fa <- read.fasta("oxygen-binders.fa")
# Getting sequences and gene names from fa object
genes <- sapply(strsplit(names(fa), "\\."), function(v) {return(v[1])})
sequences <- sapply(fa, c2s)
# Extracting longest transcript for each gene
filtered_seq <- tapply(sequences, genes, function(v) {return(v[which(nchar(v) == max(nchar(v)))])})
# Creating an object suitable for the write.fasta function
obj <- tapply(filtered_seq, 1:length(filtered_seq), c2s)
# Writing output file
write.fasta(obj , names(filtered_seq), file="output.fa")
